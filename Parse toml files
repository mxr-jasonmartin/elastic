# Output to a csv or screen
$outputToFile = $true

# Directory where .toml files are located
$directoryPath = "C:\Users\ja008827\Downloads\vscode-directory\Elastic Detection Rules\detection-rules\rules"

#directory to save csv file
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$outputFile = "C:\Users\ja008827\Downloads\vscode-directory\output_$timestamp.csv"

# Ensure the directory exists
if (-not (Test-Path $directoryPath)) {
    Write-Host "Directory does not exist: $directoryPath"
    exit
}

# Creates CVS object and inserts the headers
$csvData = @()

# Get all .toml files recursively
Get-ChildItem -Path $directoryPath -Recurse -Filter *.toml | ForEach-Object {
    
    # Read the .toml file
    $file = $_.FullName
    $content = Get-Content -Path $file
    
    # Find the folder and declare that as the category
    $category = ($_.DirectoryName -split '\\')[-1]
    
    # Do not parse the _depricated directory
    if ($category -eq "_deprecated") {
        $content = ""
    }
    # Initialize variables for name
    $name = ""
    # Initialize variables for index
    $index = ""
    $indexmatch = ""
    $indexMatches = @()
    # Initialize variables for query
    $query = ""
    $queryMatches = @()
    # Initialize variables for fields
    $field = ""
    $fieldMatches = @()

    # Flags to track sections and collection states
    $inRuleSection = $false
    $indexSelected = $false
    $nameSelected = $false
    $collectingQuery = $false
    $collectingComplete = $false

    # Process each line to extract name, index, and query
    foreach ($line in $content) {
        # Check if we're entering the [rule] section
        if ($line -eq "[rule]") {
            $inRuleSection = $true
        }
        if ($inRuleSection) {
            # Save Index line
            if ($line -match '^index\s*=\s*\[') {
                $indexSelected = $true
                $indexMatch = [regex]::Matches($line, '"([^"]*)"')
                foreach($match in $indexMatch) {
                    if ($match -and $match.Groups[1]) {
                        $indexMatches += $match.Groups[1].Value
                    }
                }
            }
            #Save Name line
            if ($line -match '^name\s*=\s*"([^"]*)"') { 
                $nameSelected = $true 
                $name = $Matches[1]
            }
            if ($line -eq "query = '''") {
                $collectingQuery = $true
            }
            if ($indexSelected -and $nameSelected -and $collectingQuery) {
                if ($line -eq "'''") {
                    # End of query, process collected content
                    $collectingComplete = $true
                    $query += $line.Substring(0, $line.IndexOf("'''"))
                    $queryMatches = [regex]::Matches($query, '(?:^|\s|\(|\[)([A-Za-z0-9_.]+)(?=\s*(?:==|!=|>|<|in|:))')
                    foreach($match in $queryMatches) {
                        $fieldMatches += $match.Groups[1].Value
                    }
                    foreach($index in $indexMatches) {
                        $csvData += [PSCustomObject]@{ Category = $category; Name = $name; Type = "Index"; Result = $index }
                    }
                    # Process query field matches
                    foreach($field in $fieldMatches) {
                        $csvData += [PSCustomObject]@{ Category = $category; Name = $name; Type = "Field"; Result = $field }
                    }
                } else {
                    # Append line to query content
                    $query += $line
                }
            }
            if ($collectingComplete) {
                # End collection for this file
                continue
            }
        }
    }
}

if ($outputToFile) {
    # Export to CSV, ensuring commas within fields are handled correctly
    $csvData | Export-Csv -Path $outputFile -NoTypeInformation -Delimiter ","
    # Write-Host $csvData
} else {
    # Output to console if not writing to file
    Write-Host $csvData
}

# Final output message
if ($outputToFile) {
    Write-Host "Data extraction completed. Results saved to $outputFile"
} else {
    Write-Host "Data extraction completed. Results output to screen."
}